generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  pomodoros     PomodoroSession[]
  sessions      Session[]
  tags          Tag[]
  profile       UserProfile?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  defaultPomodoro   Int      @default(25)
  defaultShortBreak Int      @default(5)
  defaultLongBreak  Int      @default(15)
  longBreakInterval Int      @default(4)
  defaultAlarmSound String   @default("bell")
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PomodoroSession {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  title          String
  focusDuration  Int
  shortBreak     Int
  longBreak      Int
  expectedCycles Int
  cycles         Int      @default(0)
  startTime      DateTime @default(now())
  endTime        DateTime?
  isCompleted    Boolean  @default(false)

  tags           Tag[]    @relation("PomodoroTags")
}

model Tag {
  id      String             @id @default(cuid())
  name    String
  userId  String
  user    User               @relation(fields: [userId], references: [id])

  sessions PomodoroSession[] @relation("PomodoroTags")
}

